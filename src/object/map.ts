import { entries } from './entries';
import { fromEntries } from './from-entries';

/**
 * Iteratee Type.
 * @param entry A `source` entry, which is a key-value pair.
 * @template Key Type for the entry's `key` passed in params.
 * @template Value Type for the entry's `value` passed in params.
 * @template TransformedResult Return type of the iteratee. Must be an array of 2 elements [key, value].
 * @returns The transformation of the `entry` in the same shape (key-value pair).
 */
export type Iteratee<
  Key extends keyof any,
  Value,
  TransformedResult extends [keyof any, unknown],
> = (entry: [Key, Value]) => TransformedResult;

/**
 * Creates an object with entries generated by running each own enumerable entry of object through iteratee. The iteratee is invoked with a tuple argument: [key, value].
 * @param source The object to iterate over.
 * @param iteratee The function invoked per iteration.
 * @template Key Type of the keys that composed the `source`.
 * @template Value Type of the values that composed the `source`.
 * @template NewKey Type of the transformation apply to the keys that composed the `source`.
 * @template NewValue Type of the transformation apply to the values that composed the `source`.
 * @returns Returns the new mapped object.
 */
export const map = <
  Key extends keyof any,
  Value,
  NewKey extends keyof any,
  NewValue,
>(
  source: Readonly<Record<Key, Value>>,
  iteratee: Iteratee<Key, Value, [NewKey, NewValue]>,
) => fromEntries(entries(source).map(([key, value]) => iteratee([key, value])));
